Query,Output
"Retrieve all tasks assigned to user ""USER-XYZ"", prioritize them, and assign the top 3 to the user ""USER-123"". Mark the next 2 tasks as completed, delete the task with the lowest priority, and generate a report for the user ""USER-XYZ"" including a summary of the remaining tasks. If there are any tasks related to the ""DevOps"" work type, estimate the work hours for those tasks.","var_1 = fetch_user_tasks(user_id=""USER-XYZ"")
var_2 = prioritize_objects(objects=var_1)
var_3 = assign_task_to_user(task_id=var_2[0], user_id=""USER-123"")
var_4 = assign_task_to_user(task_id=var_2[1], user_id=""USER-123"")
var_5 = assign_task_to_user(task_id=var_2[2], user_id=""USER-123"")
var_6 = mark_task_as_completed(task_id=var_2[3])
var_7 = mark_task_as_completed(task_id=var_2[4])
var_8 = delete_object_by_id(object_id=var_2[-1])
var_9 = generate_report(report_type=""tasks"", subject_id=""USER-XYZ"")
for loop_var in var_1:
    temp_1 = works_list(type=[""task""], owned_by=[""USER-XYZ""])
    for temp_2 in temp_1:
        temp_3 = search_object_by_name(query=""DevOps"")
        if temp_2 == temp_3:
            temp_4 = estimate_work_hours(work_id=temp_2)"
"Combine and prioritize the list of tasks assigned to ""USER-789"" and ""USER-321"", including completed tasks. Generate a report for these tasks, estimate the total work hours required, and assign the task with the highest estimated hours to ""USER-789"". Mark the task with the lowest priority as completed and delete the second-lowest priority task from the system.","var_1 = fetch_user_tasks(user_id=""USER-789"", include_completed=True)
var_2 = fetch_user_tasks(user_id=""USER-321"", include_completed=True)
var_3 = prioritize_objects(objects=var_1 + var_2)
var_4 = generate_report(report_type=""tasks"", subject_id=""USER-789"")
var_5 = generate_report(report_type=""tasks"", subject_id=""USER-321"")
var_6 = estimate_work_hours(work_id=var_3[0])
temp_1 = assign_task_to_user(task_id=var_3[0], user_id=""USER-789"")
temp_2 = mark_task_as_completed(task_id=var_3[-1])
temp_3 = delete_object_by_id(object_id=var_3[-2])"
"For the user with ID ""USER-789"", fetch all their incomplete tasks, estimate the work hours for each task, and generate a report including a summary. Assign the task with the highest estimated hours to the user ""USER-123"", mark it as completed, and delete the task with the lowest estimated hours.","var_1 = fetch_user_tasks(user_id=""USER-789"", include_completed=False)
var_2 = []
for loop_var in var_1:
    temp_1 = estimate_work_hours(work_id=loop_var)
    var_2.append((loop_var, temp_1))
var_2.sort(key=lambda x: x[1], reverse=True)
var_3 = assign_task_to_user(task_id=var_2[0][0], user_id=""USER-123"")
var_4 = mark_task_as_completed(task_id=var_2[0][0])
var_5 = delete_object_by_id(object_id=var_2[-1][0])
var_6 = summarize_objects(objects=var_1)
var_7 = generate_report(report_type=""task"", subject_id=""USER-789"", include_summary=True)"
"Retrieve all tasks assigned to user ""USER-XYZ"", mark any completed tasks as done, estimate the hours for the remaining tasks, generate a report for ""USER-XYZ"" including a summary of the tasks, and if any task is related to the ""Development"" team, assign it to user ""DEV-LEAD"". If the task is marked as high priority, add it to the current sprint, otherwise, delete the task from the system.","var_1 = fetch_user_tasks(user_id=""USER-XYZ"", include_completed=True)
var_2 = []
var_3 = []
var_4 = search_object_by_name(query=""Development"")
var_5 = get_sprint_id()

for loop_var in var_1:
    temp_1 = mark_task_as_completed(task_id=loop_var)
    if not temp_1:
        temp_2 = estimate_work_hours(work_id=loop_var)
        var_2.append(loop_var)
        var_3.append(temp_2)
        
var_6 = generate_report(report_type=""tasks"", subject_id=""USER-XYZ"")

for loop_var in var_2:
    temp_3 = get_similar_work_items(work_id=loop_var)
    if var_4 in temp_3:
        temp_4 = assign_task_to_user(task_id=loop_var, user_id=""DEV-LEAD"")
    temp_5 = works_list(created_by=[""USER-XYZ""], work_type=[""issue"", ""ticket"", ""task""])
    for temp_loop_var in temp_5:
        if ""priority"" in temp_loop_var and temp_loop_var[""priority""] == ""high"":
            temp_6 = add_work_items_to_sprint(work_ids=[loop_var], sprint_id=var_5)
        else:
            temp_7 = delete_object_by_id(object_id=loop_var)"
"For user ""USER-789"", fetch their tasks and include completed ones. Summarize these tasks and generate a report with the summary. Assign the highest priority task to the user ""USER-789"" and estimate the work hours for it. Mark the task with the lowest priority as completed, and if there are any tasks related to the part ""PART-XYZ"", delete the object with the least priority. If the current sprint is ""SPRINT-ABC"", add the top 3 prioritized tasks to it; otherwise, create actionable tasks from the text ""Urgent updates needed"" and add these to sprint ""SPRINT-DEF"".","var_1 = search_object_by_name(query=""USER-789"")
var_2 = fetch_user_tasks(user_id=var_1, include_completed=True)
var_3 = summarize_objects(objects=var_2)
var_4 = generate_report(report_type=""tasks"", subject_id=var_1)
var_5 = prioritize_objects(objects=var_2)
var_6 = assign_task_to_user(task_id=var_5[0], user_id=""USER-789"")
var_7 = estimate_work_hours(work_id=var_5[0])
var_8 = mark_task_as_completed(task_id=var_5[-1])
var_9 = search_object_by_name(query=""PART-XYZ"")
temp_1 = delete_object_by_id(object_id=var_5[-1]) if var_9 in var_2 else None
var_10 = get_sprint_id()
if(var_10==""SPRINT-ABC""):
    temp_2 = add_work_items_to_sprint(work_ids=var_5[:3], sprint_id=var_10)
else:
    temp_3 = create_actionable_tasks_from_text(text=""Urgent updates needed"")
    temp_4 = add_work_items_to_sprint(work_ids=temp_3, sprint_id=""SPRINT-DEF"")"
"Identify tasks from customer feedback ""CustomerFeedback123"" and assign them to team members from ""TeamAlpha"". Mark the tasks as completed for those who have no pending tasks. For the rest, create a report including a summary of their assigned tasks and estimate the work hours required for each task. If the tasks exceed 40 hours, reassign the excess to other team members.","var_1 = create_actionable_tasks_from_text(text=""CustomerFeedback123"")
var_2 = find_team_members(team_id=""TeamAlpha"")
for loop_var in range(0, len(var_2)):
    temp_1 = fetch_user_tasks(user_id=var_2[loop_var])
    if(len(temp_1) == 0):
        temp_2 = assign_task_to_user(task_id=var_1[loop_var], user_id=var_2[loop_var])
        temp_3 = mark_task_as_completed(task_id=var_1[loop_var])
    else:
        temp_4 = generate_report(report_type=""tasks"", subject_id=var_2[loop_var])
        temp_5 = estimate_work_hours(work_id=var_1[loop_var])
        if(temp_5 > 40):
            temp_6 = assign_task_to_user(task_id=var_1[loop_var], user_id=var_2[(loop_var+1) % len(var_2)])"
"Identify tasks assigned to user ""USER-789"" including completed ones, estimate the work hours for each task, generate a report including a summary for these tasks, and then reassign all incomplete tasks to user ""USER-456"". For any task that cannot be reassigned, mark it as completed and delete it from the system.","var_1 = search_object_by_name(query=""USER-789"")
var_2 = fetch_user_tasks(user_id=var_1, include_completed=True)
var_3 = generate_report(report_type=""tasks"", subject_id=var_1)
for loop_var in var_2:
    temp_1 = estimate_work_hours(work_id=loop_var)
    temp_2 = assign_task_to_user(task_id=loop_var, user_id=""USER-456"")
    if not temp_2:
        temp_3 = mark_task_as_completed(task_id=loop_var)
        temp_4 = delete_object_by_id(object_id=loop_var)"
"Retrieve all tasks assigned to user ""USER-XYZ"", mark any completed tasks as such, and generate a report for the user's completed tasks. For the remaining incomplete tasks, estimate the work hours, prioritize them, and assign the top 3 tasks to the user ""USER-ABC"". Delete any tasks that cannot be assigned due to insufficient work hours estimation. If any tasks are related to the team ""TeamAlpha"", find the team member IDs and include a summary of these tasks in the report.","var_1 = fetch_user_tasks(user_id=""USER-XYZ"", include_completed=True)
var_2 = []
var_3 = []
var_4 = []
for loop_var in var_1:
    if loop_var[""status""] == ""completed"":
        temp_1 = mark_task_as_completed(task_id=loop_var[""id""])
        var_2.append(loop_var[""id""])
    else:
        temp_2 = estimate_work_hours(work_id=loop_var[""id""])
        if temp_2 > 0:
            var_3.append(loop_var)
        else:
            temp_3 = delete_object_by_id(object_id=loop_var[""id""])
var_5 = generate_report(report_type=""tasks"", subject_id=""USER-XYZ"", include_summary=False)
var_6 = prioritize_objects(objects=var_3)
var_7 = assign_task_to_user(task_id=var_6[0][""id""], user_id=""USER-ABC"")
var_8 = assign_task_to_user(task_id=var_6[1][""id""], user_id=""USER-ABC"")
var_9 = assign_task_to_user(task_id=var_6[2][""id""], user_id=""USER-ABC"")
var_10 = find_team_members(team_id=""TeamAlpha"")
var_11 = works_list(owned_by=var_10, type=[""task""])
var_12 = summarize_objects(objects=var_11)"
"Retrieve all tasks assigned to user ""USER-789"", prioritize the tasks, and generate a report including a summary. Assign the most critical task to ""USER-789"", estimate the work hours for it, mark it as completed, and delete the task with the lowest priority. If any tasks are related to the ""QualityAssurance"" report type, create a new sprint report for them.","var_1 = fetch_user_tasks(user_id=""USER-789"")
var_2 = prioritize_objects(objects=var_1)
var_3 = generate_report(report_type=""tasks"", subject_id=""USER-789"")
var_4 = assign_task_to_user(task_id=var_2[0], user_id=""USER-789"")
var_5 = estimate_work_hours(work_id=var_2[0])
var_6 = mark_task_as_completed(task_id=var_2[0])
var_7 = delete_object_by_id(object_id=var_2[-1])
temp_1 = search_object_by_name(query=""QualityAssurance"")
temp_2 = create_actionable_tasks_from_text(text=temp_1)
temp_3 = generate_report(report_type=""sprint"", subject_id=temp_2)"
"Retrieve all tasks assigned to user ""USER-789"", estimate the hours for each task, and generate a report including a summary. Then, assign the task with the highest estimated hours to ""USER-789"", mark it as completed, and delete the task with the lowest estimated hours. If there are any remaining tasks, add them to the current sprint.","var_1 = fetch_user_tasks(user_id=""USER-789"", include_completed=False)
var_2 = []
for loop_var in range(len(var_1)):
    temp_1 = estimate_work_hours(work_id=var_1[loop_var])
    var_2.append((var_1[loop_var], temp_1))
var_3 = sorted(var_2, key=lambda x: x[1], reverse=True)
var_4 = generate_report(report_type=""tasks"", subject_id=var_3[0][0])
temp_2 = assign_task_to_user(task_id=var_3[0][0], user_id=""USER-789"")
temp_3 = mark_task_as_completed(task_id=var_3[0][0])
temp_4 = delete_object_by_id(object_id=var_3[-1][0])
if len(var_3) > 2:
    temp_5 = get_sprint_id()
    temp_6 = add_work_items_to_sprint(work_ids=[task[0] for task in var_3[1:-1]], sprint_id=temp_5)"
