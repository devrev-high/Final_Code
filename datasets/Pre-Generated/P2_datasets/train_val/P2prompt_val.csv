Prompt
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""

        Query: Retrieve similar work items to ""TASK-321"", add them to the sprint, and summarize [/INST]

        ```
        var_1 = get_similar_work_items(work_id=""TASK-321"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
var_4 = summarize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""


def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""


def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""


def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""

        Query: Get work items in ""DEVELOPMENT"" stage for the ""NEW-FEATURE"" part and summarize the progress [/INST]

        ```
        var_1 = search_object_by_name(query=""NEW-FEATURE"")
var_2 = works_list(stage.name=[""DEVELOPMENT""], applies_to_part=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""


def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""


def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""


def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""

        Query: For the customer ""TechCorp"", list all P2 issues, and summarize them. [/INST]

        ```
        var_1 = search_object_by_name(query=""TechCorp"")
var_2 = works_list(ticket.rev_org=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""


def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""


def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""


def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""


def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""


def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""

        Query: Find tickets needing response for product PROD-ABC and prioritize them [/INST]

        ```
        var_1 = search_object_by_name(query=""PROD-ABC"")
var_2 = works_list(type=[""ticket""], applies_to_part=[var_1], ticket.needs_response=True)
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""


def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""


def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""


def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""

        Query: Find the current sprint ID and list all my issues with priority P2 [/INST]

        ```
        var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(type=[""issue""], issue.priority=[""p2""], owned_by=[var_1])

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""


def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""


def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""


def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""

        Query: Summarize the p1 priority issues created by UserXYZ and check if they are in the current sprint [/INST]

        ```
        var_1 = works_list(type=[""issue""], issue.priority=[""p1""], created_by=[""UserXYZ""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""


def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""

        Query: Summarize the work items created by user UXD-789 and filter by the Rev organization 'REV-ABC' [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-ABC"")
var_2 = works_list(created_by=[""UXD-789""], issue.rev_orgs=[var_1])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""


def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""


def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""


def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

        Query: Get the current user's issues with priority 'p2' that are in the 'development' stage, and summarize the list. [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], stage.name=[""development""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""


def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""

        Query: Generate a report on the current sprint's tasks, including those related to user ""DevOps-42"" [/INST]

        ```
        var_1 = search_object_by_name(query=""DevOps-42"")
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], type=[""task""])
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""

        Query: Identify and prioritize unresolved issues for user DEVU-321 [/INST]

        ```
        var_1 = works_list(created_by=[""DEVU-321""], issue.rev_orgs=[""unresolved""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""


def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
""""""


def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""


def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

        Query: Get the current user's ID and display all their tickets [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(type=[""ticket""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""


def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""


def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""
def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""


def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

        Query: Summarize all medium severity tickets and check if any requires immediate response [/INST]

        ```
        var_1 = works_list(ticket.severity=[""medium""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""


def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""
def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
    sprint_id (str): The ID of the sprint for workload calculation

Returns:
    float: Total workload in hours
""""""


def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""


def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""

        Query: Could there be a cosmic intelligence guiding the unfolding of the universe? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""


def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""


def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""


def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""


def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""
def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

        Query:  Find work items with issue priority P3, summarize them, and add them to the current sprint, limiting the results to 28. [/INST]

        ```
        var_1 = works_list(issue.priority=[""P3""], limit=28)
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Find and summarize work issues for the ""New Features"" project with priority P1 or P2 [/INST]

        ```
        var_1 = search_object_by_name(query=""New Features"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p1"", ""p2""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        def filter_projects_by_status(project_ids, status=""active""):
 """"""
 Filters a list of project IDs by their status
 
 Parameters:
  project_ids (list): A list of project IDs to filter
  status (str): The status to filter by, default is 'active'
 
 Returns:
  list: Project IDs matching the status
 """"""
 ', '
 
 def extract_contact_info(text_id, entity_type):
 """"""
 Extracts contact information from a text source based on a given entity type
 
 Parameters:
  text_id (str): The ID of the text source from which to extract contact information
  entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'
 
 Returns:
  list: Extracted contact information
 """"""', '
 
 def get_work_item_history(work_id):
 """"""
 Retrieves the history of changes for a given work item
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: A chronological list of changes made to the work item
 """"""
 ', '
 
 def list_user_permissions(user_id):
 """"""
 Lists all the permissions that a user has within the system
 
 Parameters:
  user_id (str): The ID of the user for whom permissions are being listed
 
 Returns:
  list: A list of permissions that the user possesses
 """"""
 ', '
 
 def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
 """"""
 Merges duplicate work items into the primary work item
 
 Parameters:
  primary_work_id (str): The ID of the primary work item
  duplicate_work_ids (list): List of IDs of duplicate work items to be merged
 
 Returns:
  bool: True if merge was successful, otherwise False
 """"""
 

        Query: Create actionable tasks from the text of the latest team meeting, filter these tasks by status ""in-progress"", and extract contact information for any mentioned individuals. Prioritize the tasks, retrieve their history, and merge any duplicates. Add the primary task to the current sprint and list the permissions of the user who created the tasks. [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""latest team meeting"")
var_2 = works_list(type=[""task""], stage.name=[""in-progress""])
var_3 = extract_contact_info(text_id=var_2, entity_type=""individual"")
var_4 = prioritize_objects(objects=var_2)
var_5 = get_work_item_history(work_id=var_2)
var_6 = merge_duplicate_work_items(primary_work_id=var_4[0], duplicate_work_ids=var_4[1:])
var_7 = get_sprint_id()
var_8 = add_work_items_to_sprint(work_ids=[var_4[0]], sprint_id=var_7)
var_9 = list_user_permissions(user_id=var_1)
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: For the ""CustomerX"" issue, get similar work items, add any P0 issues to the current sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""CustomerX"")
var_2 = get_similar_work_items(work_id=var_1)
var_3 = works_list(issue.priority=[""p0""], type=[""issue""])
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""


def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""


def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""

        Query: Generate a list of tasks from the discussion notes T and prioritize them [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""T"")
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""


def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""


def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""


def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""
def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""


def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""


def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
    user_id (str): The ID of the user whose permissions need to be checked
    required_permissions (list): A list of permissions to check against the user's permissions

Returns:
    bool: True if the user has all the required permissions, False otherwise
""""""

        Query: Create a summary of issues in 'QA Testing' stage for part 'UIX-456'. [/INST]

        ```
        var_1 = works_list(type=[""issue""], stage.name=[""QA Testing""], applies_to_part=[""UIX-456""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""
def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""
def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""


def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
 project_id (str): The ID of the project to be analyzed

Returns:
 str: Estimated date of completion
""""""
', '

def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
 user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
 list: The list of permissions for the user
""""""
', '

def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
 str: The status of the ticket
""""""
', 'def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
 issue_id (str): The ID of the issue to be updated
 new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
 object_id (str): The ID of the object to be removed
 sprint_id (str): The ID of the project from which the object should be removed

Returns:
 list: Returns the updated list of sprint objects
""""""
', '

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
 category_id (str): The ID of the category to filter projects by
 active_only (bool): Whether to return only active projects

Returns:
 list: List of project IDs matching the category filter
""""""
', '

def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
 project_id (str): The ID of the project for which progress is being calculated

Returns:
 float: The progress percentage of the project
""""""
', '

def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
 task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
 float: Total effort spent on the task
""""""
', '

def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
 keyword (str): The keyword to search for in the documents

Returns:
 str: ID of the document containing the keyword
""""""', '

def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
 work_id (str): The ID of the work item

Returns:
 list: A chronological list of changes made to the work item
""""""


        Query: Retrieve the estimated completion date for project ""PROJ-42"", calculate its overall progress percentage, and summarize any high-severity tickets related to it. [/INST]

        ```
        var_1 = calculate_estimated_completion(project_id=""PROJ-42"")
var_2 = calculate_progress(project_id=""PROJ-42"")
var_3 = works_list(type=[""ticket""], ticket.severity=[""high""], applies_to_part=[""PROJ-42""])
var_4 = summarize_objects(objects=var_3)
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""
def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""


def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""

        Query: Extract tasks from the project notes P and categorize them by type [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""P"")
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Search for issues created by user ""USER-789"", get their sprint ID, and add all tasks of type ""issue"" to that sprint. [/INST]

        ```
        var_1 = search_object_by_name(query=""USER-789"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""


def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""
def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""

        Query: Retrieve my most urgent tickets, summarize them, and identify if any need immediate response. [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(type=[""ticket""], owned_by=[var_1], ticket.severity=[""blocker"", ""high""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""

        Query: Prioritize p0 issues from REV-789 organization and filter those that are of type 'ticket' [/INST]

        ```
        var_1 = works_list(issue.rev_orgs=[""REV-789""], issue.priority=[""p0""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Find work items related to specific parts 'PART-456', 'PART-789' and get their summary [/INST]

        ```
        var_1 = works_list(applies_to_part=[""PART-456"", ""PART-789""], type=[""issue"", ""ticket"", ""task""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""
def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""
def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
    sprint_id (str): The ID of the sprint for workload calculation

Returns:
    float: Total workload in hours
""""""


def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""


def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""

        Query: Retrieve all tasks created by user USER-321, filter for stage 'development', and add to sprint SPRINT-ID-123. [/INST]

        ```
        var_1 = works_list(type=[""task""], created_by=[""USER-321""], stage.name=[""development""])
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-ID-123"")

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""


def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""


def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""


def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""


def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""


def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""


def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

        Query: Retrieve the current sprint ID and then get a list of tasks I own with priority p2 [/INST]

        ```
        var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""task""])

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""


def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""


def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""


def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
 tag_id (str): The ID of the tag used to filter work items
 include_archived (bool): Include archived work items if set to True

Returns:
 list: Work items associated with the tag
""""""
', '

def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
 user_id (str): The ID of the user whose account is to be deactivated
 reason (str): The reason for deactivating the account

Returns:
 bool: True if the account was successfully deactivated; otherwise False
""""""
', '

def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
 object_ids (list): A list of object IDs

Returns:
 str: The ID of the generated report
""""""
', '

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
 list: Comments associated with the ticket
""""""
', '

def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
 user_id (str): The ID of the user whose activity is being logged
 activity_description (str): A description of the activity

Returns:
 bool: True if the logging was successful, False otherwise
""""""
', '

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
 object_id (str): The ID of the object to be removed
 sprint_id (str): The ID of the project from which the object should be removed

Returns:
 list: Returns the updated list of sprint objects
""""""
', '

def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
 user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
 list: The list of permissions for the user
""""""
', '

def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
 project_id (str): The ID of the project to calculate the completion rate for

Returns:
 float: The completion rate as a percentage
""""""
', '

def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
 project_id (str): The ID of the project to validate

Returns:
 bool: True if completed, False otherwise
""""""
', '

def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be determined

Returns:
 int: The number of tasks assigned to the user
""""""


        Query: Retrieve the comments from ticket ""TICKET-001"", generate a summary report for these comments, and then calculate the project completion rate for project ""PROJ-42"". [/INST]

        ```
        var_1 = get_ticket_comments(ticket_id=""TICKET-001"")
var_2 = generate_summary_report(object_ids=var_1)
var_3 = calculate_project_completion_rate(project_id=""PROJ-42"")
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""


def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
""""""


def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""


def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""


def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""


def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""

        Query: Identify my tasks, prioritize them, and return a summarized list [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(type=[""task""], owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""


def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""

        Query: Find all tasks related to the ""AlphaProject"" and filter them by priority P2 [/INST]

        ```
        var_1 = search_object_by_name(query=""AlphaProject"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p2""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""


def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""


def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""

        Query:  Locate and summarize tasks with the issue type for the FINANCE rev organization, limiting the results to 18. [/INST]

        ```
        var_1 = search_object_by_name(query=""FINANCE"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""task""], limit=18)
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""

        Query: Find tasks related to feature Y and update their progress in the system [/INST]

        ```
        var_1 = search_object_by_name(query=""feature Y"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""


def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""

        Query: Retrieve the sprint ID and add my 'blocker' severity tickets to it [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""blocker""], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""


def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""


def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""


def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""


def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""


def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""

        Query: Summarize tasks related to part FRONTEND-3 in the DEVELOPMENT stage and limit the number of work items to 25. [/INST]

        ```
        var_1 = works_list(stage.name=[""DEVELOPMENT""], applies_to_part=[""FRONTEND-3""], type=[""task""], limit=25)
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""



def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""


def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""
def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""

        Query: Summarize the current sprint's tasks and issues assigned to ""TEAM-ABC"" [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], owned_by=[""TEAM-ABC""], type=[""task"", ""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""


def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

        Query: Analyze recent feedback from ""FeedbackSession1"", generate tasks from the feedback, and assign to current sprint. [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""FeedbackSession1"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""


def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""


def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""


def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""


def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""


def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""


def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""
def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""

        Query: Summarize the current sprint's work items and get similar items for ""TASK-321"" [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_similar_work_items(work_id=""TASK-321"")

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""
''
def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
 task_id (str): The ID of the task to be marked as complete

Returns:
 bool: True if marked successfully, False otherwise
""""""
''
def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""
'''
''
def delete_object_by_id(object_id):
""""""
Deletes object from the system based on its ID
Parameters:
    object_id : Object ID to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""
'''
''
def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""
''',
'''
def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""
'''
''
def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""
'''


def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""

        Query: Create actionable tasks from the customer feedback text ""FEEDBACK101"" and assign all created tasks to user ""ABC123"". [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""""FEEDBACK101"""")
for loop_var in var_1:
temp_1 = assign_task_to_user(task_id=loop_var, user_id=""ABC-123"")
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""

        Query: Summarize the current sprint's work items and find similar tasks to improve efficiency [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list()
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""


def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""


def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""


def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""

        Query: What are the differences between red and white wine? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""


def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""


def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""


def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""
def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""


def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""

        Query: For the feature FEAT-999, find similar work items, prioritize them, and add them to the sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""FEAT-999"")
var_2 = get_similar_work_items(work_id=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""

        Query: Retrieve my tasks, filter by p2 priority, and prepare for current sprint inclusion [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""


def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""


def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""


def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""
def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""


def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""

        Query: Retrieve similar work items to ISSUE-123, prioritize them, and limit the results to 45. [/INST]

        ```
        var_1 = get_similar_work_items(work_id=""ISSUE-123"")
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Retrieve and summarize tickets needing a response that are related to organization ORG-999 [/INST]

        ```
        var_1 = search_object_by_name(query=""ORG-999"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""


def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""

        Query: Generate a list of tasks from the meeting notes 'M' and assign to the team members [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""M"")

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""


def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""


def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""

        Query: Gather all issues created by user USER-456, summarize them and add to current sprint [/INST]

        ```
        var_1 = works_list(created_by=[""USER-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Find and prioritize tasks related to project Gamma, then summarize [/INST]

        ```
        var_1 = search_object_by_name(query=""Gamma"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""


def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
 project_id (str): The ID of the project to calculate the completion rate for

Returns:
 float: The completion rate as a percentage
""""""
', 'def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
 user_id (str): The ID of the user whose tasks are to be fetched
 include_completed (bool): Whether to include completed tasks in the list

Returns:
 list: List of tasks assigned to the user
""""""
', '

def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
 ticket_id (str): The ID of the ticket to be updated
 new_status (str): The new status to update the ticket with

Returns:
 bool: True if the update was successful, otherwise False
""""""
', '

def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
 user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
 str: URL of the user's avatar image
""""""
', 'def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
 issue_ids (list): A list of issue IDs that need to be assigned
 user_id (str): The user ID to whom the issues will be assigned

Returns:
 None
""""""
', '

def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
 ticket_ids (list): A list of ticket IDs to filter
 start_date (str): The start date for the range
 end_date (str, optional): The end date for the range, defaults to None

Returns:
 list: Filtered list of ticket IDs
""""""
', '

def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
 email (str): The email address of the user to find

Returns:
 str: ID of the user
""""""
', '

def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
 event_type (str): The type of event to log
 description (str): A brief description of the event
 user_id (str): The ID of the user involved in the event, if applicable

Returns:
 str: The ID of the logged event
""""""
', '

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
 sprint_id (str): The ID of the sprint
 report_type (str): The type of report to be generated

Returns:
 str: The ID of the generated report
""""""
', '

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
 work_id (str): The ID of the work item to check

Returns:
 bool: True if the work item is complete, False if it lacks information
""""""



def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""

        Query: Fetch tasks assigned to user ""QAEngineer"" including completed ones, calculate the project completion rate for project ""PROJ-42"", and log a system event with the event type ""TaskFetch"" and a description ""Fetched tasks for QAEngineer including completed"". [/INST]

        ```
        var_1 = find_user_by_email(email=""QAEngineer"")
var_2 = fetch_user_tasks(user_id=var_1, include_completed=True)
var_3 = calculate_project_completion_rate(project_id=""PROJ-42"")
var_4 = log_system_event(event_type=""TaskFetch"", description=""Fetched tasks for QAEngineer including completed"")
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""


def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""


def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""


def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""


def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""


def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""
def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""


def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""


def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""

        Query: What if consciousness is not confined to the brain but extends beyond our bodies? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""


def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""


def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""


def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""

        Query: Fetch all work items related to the product code PROD-321, prioritize them by severity, and summarize the top 5 for review [/INST]

        ```
        var_1 = search_object_by_name(query=""PROD-321"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = var_3[:5]
var_5 = summarize_objects(objects=var_4)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Summarize all ""blocker"" severity tickets for the current user. [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""blocker""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""


def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""

        Query: Identify severe tickets that require immediate attention and provide a summary for the engineering team. [/INST]

        ```
        var_1 = works_list(ticket.severity=[""blocker"", ""high""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Prioritize tickets that need a response from Rev organization REV-456 [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""


def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""

        Query: Find and summarize all issues related to part ENH-999 that are in the 'development' stage [/INST]

        ```
        var_1 = works_list(applies_to_part=[""ENH-999""], stage.name=[""development""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""


def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""


def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""


def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""

        Query: What is the fastest route from New York to Los Angeles by car? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
 activity_description (str): A brief description of the activity being logged
 user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
 bool: True if the activity was logged successfully; otherwise False
""""""
', '

def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
 list: Ticket IDs that are currently blocked
""""""', '

def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
 object_id (str): The ID of the object for which the status is updated
 new_status (str): The new status for the object
 changed_by (str): The ID of the user who is changing the status

Returns:
 None
""""""
', '

def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
 title (str): The title of the new ticket
 description (str): A detailed description of the issue or request
 reported_by (str): The ID of the user reporting the ticket

Returns:
 str: The ID of the newly created ticket
""""""
', '

def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
 task_id (str): The ID of the task
 complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
 float: Estimated duration in hours
""""""
', '

def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
 report_template_id (str): The ID of the report template to use
 data_source_id (str): The ID of the data source

Returns:
 str: Generated report
""""""
', '

def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
 project_id (str): The ID of the project for which the budget is calculated
 cost_limit (float): The cost limit for the project's budget

Returns:
 float: The amount allocated to the project budget
""""""
', 'def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
 start_date (str): The start date of the desired date range
 end_date (str): The end date of the desired date range
 work_type (list): Optional filter for type of work

Returns:
 list: Work items within the specified date range
""""""
', 'def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
 work_item_ids (list): A list of work item IDs for which due dates are required
 urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
 list: Due dates for the specified work items
""""""
', '

def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
 data_id (str): The ID of the data to be validated
 schema_id (str): The ID of the schema to validate the data against

Returns:
 bool: True if data is consistent, False otherwise
""""""


        Query: Log the activity of creating a new ticket with the title ""Database Overload"" and description ""The database is experiencing frequent overloads during peak hours"", reported by user ""DBAdmin"". Then, estimate the task duration for the newly created ticket assuming it has a high complexity level. [/INST]

        ```
        var_1 = who_am_i()
var_2 = create_new_ticket(title=""Database Overload"", description=""The database is experiencing frequent overloads during peak hours"", reported_by=""DBAdmin"")
var_3 = log_system_activity(activity_description=""Created a new ticket with the title 'Database Overload'"", user_id=var_1)
var_4 = estimate_task_duration(task_id=var_2, complexity_level=""high"")
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""


def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""

        Query: Create tasks from the 'UI/UX Design Session Notes' and prioritize them for the design team [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""UI/UX Design Session Notes"")
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: What if consciousness is a shared experience, and individuality is an illusion? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""
def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
 issue_ids (list): A list of issue IDs that need to be assigned
 user_id (str): The user ID to whom the issues will be assigned

Returns:
 None
""""""
', '

def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
 ticket_id (str): The ID of the ticket to be marked for review
 reviewer_id (str): The ID of the user who should review the ticket

Returns:
 None
""""""
', '

def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
 task_ids (list): List of task IDs to filter
 completed (bool): The completion status to filter by. Default is 'True'

Returns:
 list: List of task IDs that match the completion status
""""""
', '
def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
 user_id (str): The ID of the user whose status is to be updated
 status (str): The new status to apply to the user account

Returns:
 str: updated User Id
""""""
', '

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which the progress report is needed
 report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
 str: The generated progress report
""""""
', '

def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
 user_id (str): The ID of the user to set permissions for
 permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
 bool: True if the permission was set successfully, False otherwise
""""""
', '

def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
 report_type (str): The type of report to generate
 subject_id (str): The ID of the subject for the report
 include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
 str: The ID of the generated report
""""""
', '

def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
 task_id (str): The ID of the task to be converted

Returns:
 str: The ID of the newly created ticket
""""""
', 'def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
 ticket_ids (list): A list of ticket IDs to be assigned
 user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
 None
""""""
', '

def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
 doc_id (str): The ID of the document to which related documents should be linked
 related_doc_ids (list): A list of IDs for related documents

Returns:
 bool: True if the operation was successful, False otherwise
""""""



def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""

        Query: Assign issues with severity ""blocker"" to user ""EngineerAbhinav"", then generate a detailed progress report for project ""PX-987"". [/INST]

        ```
        var_1 = works_list(type=[""issue""], ticket.severity=[""blocker""])
var_2 = search_object_by_name(query=""EngineerAbhinav"")
var_3 = assign_issues_to_user(issue_ids=var_1, user_id=var_2)
var_4 = search_object_by_name(query=""PX-987"")
var_5 = generate_progress_report(project_id=var_4, report_format=""detailed"")
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
""""""


def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""

        Query: Prioritize tickets from REV-321 that need a response and are marked as 'blocker' [/INST]

        ```
        var_1 = works_list(issue.rev_orgs=[""REV-321""], ticket.needs_response=True, ticket.severity=[""blocker""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""


def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""


def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""


def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
    user_id (str): The ID of the user whose permissions need to be checked
    required_permissions (list): A list of permissions to check against the user's permissions

Returns:
    bool: True if the user has all the required permissions, False otherwise
""""""

        Query: Retrieve and prioritize all tickets associated with the MobileApp part, limiting the results to 15. [/INST]

        ```
        var_1 = search_object_by_name(query=""MobileApp"")
var_2 = works_list(applies_to_part=[var_1], type=[""ticket""], limit=15)
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
 feature_id (str): The ID of the feature to toggle access
 user_id (str): The ID of the user whose access will be toggled
 enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
 bool: The resulting access status
""""""
', '

def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
 user_id (str): The ID of the user whose activities are to be listed
 limit (int): The maximum number of recent activities to return

Returns:
 list: Recent activities of the user
""""""
', 'def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
 ticket_id (str): The ID of the ticket where the merged note will be added
 note_ids (list): List of note IDs that will be merged into the ticket
 updated_by (str): The ID of the user performing the merge

Returns:
 str: ID of the updated ticket note
""""""
', '

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
 work_id (str): The ID of the work item to be reassigned
 new_owner_id (str): The user ID of the new owner

Returns:
 bool: True if reassignment is successful, False otherwise
""""""
', '

def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
 text_id (str): The ID of the text source from which to extract contact information
 entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
 list: Extracted contact information
""""""', '

def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
 work_id (str): The ID of the work item to be removed
 sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
 bool: True if the removal was successful, False otherwise
""""""
', '

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 float: Estimated effort in hours
""""""
', '

def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
 str: The status of the ticket
""""""
', '

def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
 data_point_ids (list): List of data point IDs to validate

Returns:
 list: Validation results with status (True or False) for each data point
""""""
', '

def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
 user_id (str): The ID of the user to set permissions for
 permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
 bool: True if the permission was set successfully, False otherwise
""""""



def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""


def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""


def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""

        Query: Check the status of ticket ""TICKET-001"", then extract and summarize contact information for entity type ""company"" from the ticket's text source. [/INST]

        ```
        var_1 = check_ticket_status(ticket_id=""TICKET-001"")
var_2 = extract_contact_info(text_id=""TICKET-001"", entity_type=""company"")
var_3 = summarize_objects(objects=var_2)
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""


def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""


def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""


def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""


def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""

        Query: Summarize the tasks I own that are in the 'To-Do' stage and add them to the current sprint. [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""To-Do""], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""


def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""
def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""


def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

        Query: Get tickets requiring response, summarize them, and add them to the support team's current sprint [/INST]

        ```
        var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""


def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""


def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""

        Query: Get the ID for the current sprint and list all low severity tickets for it [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(ticket.severity=[""low""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""


def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""


def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""


def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""

        Query: Summarize my tasks in the 'development' stage [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(stage.name=[""development""], owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""


def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""


def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""

        Query: Find similar work items to ""TASK-789"", summarize the findings, and prioritize for this week's focus [/INST]

        ```
        var_1 = get_similar_work_items(work_id=""TASK-789"")
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""


def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""


def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""


def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""


def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""

        Query: Identify all 'blocker' level tickets from the 'support' channel and them to sprint. [/INST]

        ```
        var_1 = works_list(ticket.severity=[""blocker""], ticket.source_channel=[""support""], type=[""ticket""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""


def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""


def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
 object_id (str): The ID of the object to be removed from the archive

Returns:
 bool: True if the object was successfully removed, False otherwise
""""""
', '

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
 task_ids (list): A list of task IDs to be assigned
 employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
 bool: True if the assignment was successful, False otherwise
""""""
', '

def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
 work_id (str): The ID of the work item to estimate cost for
 cost_per_hour (float): The cost per hour. Default is '100'

Returns:
 float: Estimated cost
""""""', '

def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
 project_id (str): The ID of the project for which progress is being calculated

Returns:
 float: The progress percentage of the project
""""""
', '

def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
 user_id (str): The ID of the user for whom to calculate the workload

Returns:
 int: The total number of open work items
""""""
', '

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
 list: Comments associated with the ticket
""""""
', '

def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: List of team member IDs
""""""
', '

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task will be assigned

Returns:
 bool: True if assignment was successful, otherwise False
""""""
', '

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
 user_id (str): The ID of the user
 object_id (str): The ID of the object to check permission for

Returns:
 bool: True if the user has permission, False otherwise
""""""
', 'def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
 ticket_id (str): The ID of the ticket to be assigned
 user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""



def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""


def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""

        Query: Estimate the cost for work items created by user ""ArchitectAnna"" with severity ""high,"" then assign those tasks to employee ""EmployeeEve."" [/INST]

        ```
        var_1 = search_object_by_name(query=""ArchitectAnna"")
var_2 = works_list(created_by=[var_1], ticket.severity=[""high""], type=[""task""])
var_3 = estimate_cost_for_work(work_id=var_2)
var_4 = assign_tasks_to_employee(task_ids=var_2, employee_id=""EmployeeEve"")
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""


def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""


def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""

        Query: Identify issues owned by me that need a response, and return a prioritized list [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""issue""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""


def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""


def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""


def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""


def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""


def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""


def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""


def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""

        Query: Summarize the tasks related to the ""Project-X"" sprint and prioritize them [/INST]

        ```
        var_1 = search_object_by_name(query=""Project-X"")
var_2 = works_list(stage.name=[""sprint""], applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""
def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""

        Query: Identify tasks assigned to the DevOps team, excluding 'done' stage, and summarize action items [/INST]

        ```
        var_1 = works_list(owned_by=[""DevOps""], stage.name=[""done""], type=[""task""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""


def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""


def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""

        Query: Summarize my issues of type 'issue' and 'ticket' [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""issue"", ""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""
def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""


def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""

        Query: Is there a universal moral code, or is morality inherently subjective? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""

        Query: Extract tasks from the development team discussions and classify them by type [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""development team discussions"")
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Add all my P2 tickets related to REV-456 to the current sprint [/INST]

        ```
        var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], issue.priority=[""p2""], issue.rev_orgs=[""REV-456""], type=[""ticket""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""

        Query: Summarize issues in the 'QA' stage for part 'FEAT-789' [/INST]

        ```
        var_1 = works_list(stage.name=[""QA""], applies_to_part=[""FEAT-789""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Prioritize my tickets related to the ""support"" type and summarize the top priority ones [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.source_channel=[""support""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""


def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""


def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""


def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""
def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""


def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""

        Query: Find all tasks related to the 'Q4 Product Launch' and organize them by priority [/INST]

        ```
        var_1 = search_object_by_name(query=""Q4 Product Launch"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""


def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""

        Query: Summarize the work items with 'blocker' severity and then search for a user named DevLead [/INST]

        ```
        var_1 = works_list(type=[""issue"", ""ticket""], ticket.severity=[""blocker""])
var_2 = summarize_objects(objects=var_1)
var_3 = search_object_by_name(query=""DevLead"")

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Check for any tickets that have been marked as 'blocker' and summarize them [/INST]

        ```
        var_1 = works_list(ticket.severity=[""blocker""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""

        Query: Prioritize the list of tasks for the ""BetaFeature"" and add high priority tasks to the sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""BetaFeature"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Summarize my tasks, prioritize them and add them to the sprint [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""


def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
 object_id (str): The ID of the object to remove from inventory

Returns:
 bool: True if the removal was successful, False otherwise
""""""
', '

def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 list: Attachment file IDs
""""""
', 'def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
 issue_id (str): The ID of the issue to be updated
 new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
 ticket_id (str): The ID of the ticket for which the history is requested
 history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
 list: A list of history records for the ticket
""""""
', '

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
 work_id (str): The ID of the work item to be reassigned
 new_owner_id (str): The user ID of the new owner

Returns:
 bool: True if reassignment is successful, False otherwise
""""""
', 'def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
 department_id (str): The ID of the department to filter users
 active_only (bool): Filters for only active users if set to True

Returns:
 list: Users in the specified department
""""""
', '

def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
 work_id (str): The ID of the work item to be removed
 sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
 bool: True if the removal was successful, False otherwise
""""""
', '

def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
 work_item_id (str): The ID of the work item to check
 status_options (list): A list of valid status options

Returns:
 bool: True if status is valid, False otherwise
""""""
', '

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
 task_ids (list): A list of task IDs to be assigned
 employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
 bool: True if the assignment was successful, False otherwise
""""""
', '

def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
 prefix (str): A prefix for the identifier
 use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
 str: The generated unique identifier
""""""

```
def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""

        Query: Find all work items with severity ""high"" that are owned by ""TeamLead"", remove them from sprint ""S123"", and then fetch their attachment lists. [/INST]

        ```
        var_1 = works_list(owned_by=[""TeamLead""], ticket.severity=[""high""])
var_2 = get_sprint_id()
var_3 = remove_work_item_from_sprint(work_id=var_1, sprint_id=""S123"")
var_4 = list_work_attachments(work_id=var_1)
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
 keyword (str): The keyword to search for in the documents

Returns:
 str: ID of the document containing the keyword
""""""', '

def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be calculated

Returns:
 float: The calculated workload value
""""""
', '

def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
 text_id (str): The ID of the text source from which to extract contact information
 entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
 list: Extracted contact information
""""""', '

def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
 sprint_id (str): The ID of the sprint to extend
 new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
 bool: True if the sprint end date was extended, False otherwise
""""""
', '

def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
 user_id (str): The ID of the user whose completed items are being requested

Returns:
 list: Completed items by the user
""""""
', '

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
 feature_id (str): The ID of the feature to toggle access
 user_id (str): The ID of the user whose access will be toggled
 enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
 bool: The resulting access status
""""""
', '

def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
 project_id (str): The ID of the project for which to calculate progress

Returns:
 float: The percentage of project completion
""""""
', '

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
 object_id (str): The ID of the object to be removed
 sprint_id (str): The ID of the project from which the object should be removed

Returns:
 list: Returns the updated list of sprint objects
""""""
', '

def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
 user_id (str): The ID of the user with whom to schedule a meeting
 duration (int): Duration of the meeting in minutes, default is '30'
 urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
 str: The ID of the scheduled meeting
""""""
', '

def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
 work_item_id (str): The ID of the work item to update
 new_stage (str): The new stage to which the work item should be moved

Returns:
 bool: True if the stage is successfully updated, False otherwise
""""""

        Query: Calculate the workload for user ""EngineerEmma"" and list all high severity tickets they own, then schedule an urgent meeting with them to discuss. [/INST]

        ```
        var_1 = search_object_by_name(query=""EngineerEmma"")
var_2 = calculate_user_workload(user_id=var_1)
var_3 = works_list(created_by=[var_1], ticket.severity=[""high""], type=[""ticket""])
var_4 = schedule_meeting_with_user(user_id=var_1, urgent=True)
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""


def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""


def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""
def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""
def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""

        Query: Add all my P2 tickets to the current sprint and prioritize them [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p2""], owned_by=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Add all blocker tickets created by user USER-567 to the current sprint [/INST]

        ```
        var_1 = works_list(created_by=[""USER-567""], ticket.severity=[""blocker""], type=[""ticket""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""
def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
    sprint_id (str): The ID of the sprint for workload calculation

Returns:
    float: Total workload in hours
""""""


def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""


def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

        Query: Find all my tasks related to the ENH-456 enhancement and list them in order of priority. [/INST]

        ```
        var_1 = who_am_i()
var_2 = search_object_by_name(query=""ENH-456"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = prioritize_objects(objects=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""


def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""


def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""

        Query: What if reality is a constantly shifting mosaic, and our understanding of it is always incomplete? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""

        Query: Summarize the top priority tasks and add them to the sprint with ID SPRINT-456 [/INST]

        ```
        var_1 = prioritize_objects(objects=[])
var_2 = summarize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-456"")

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""


def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""

        Query: Summarize the current sprint's tasks related to Project X [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""Project X"")
var_3 = works_list(applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""

        Query: Find issues related to the REV-Engineering department and summarize them. [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-Engineering"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""

        Query: For the Rev organization ""REV-XYZ"", list all tasks, filter by critical stage, and summarize the workload. [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-XYZ"")
var_2 = works_list(issue.rev_orgs=[var_1], stage.name=[""critical""], type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""


def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""

        Query: Summarize my P1 issues and check if any need responses from the 'Support' channel [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p1""], owned_by=[var_1], ticket.source_channel=[""Support""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""


def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""

        Query: Extract actionable tasks from the provided meeting notes ""M"" and add them to sprint ID SPRINT-456 [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-456"")

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""


def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""


def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""


def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""


def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""


def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""

        Query: Find and summarize tasks needing response for Rev organization REV-999 [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-999"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""


def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""

        Query: Summarize my tasks related to CAPL-456 and check if they need responses [/INST]

        ```
        var_1 = who_am_i()
var_2 = search_object_by_name(query=""CAPL-456"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""


def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""


def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""


def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""

        Query: Summarize work items from sprint SPR-123 and filter for high severity issues [/INST]

        ```
        var_1 = works_list(ticket.severity=[""high""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""


def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""


def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""


def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""

        Query: Update my task list with items from the Engineering Rev organization E [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(issue.rev_orgs=[""Engineering""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""


def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to estimate time for

Returns:
    float: Estimated time in hours to resolve the ticket
""""""


def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""

        Query: Locate my tasks with 'awaiting_feedback' status and prepare a concise report. [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""awaiting_feedback""], type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""


def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""


def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""


def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""


def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""
def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""

        Query: Identify issues in 'development' stage for parts FEAT-789, summarize and assign priority [/INST]

        ```
        var_1 = works_list(applies_to_part=[""FEAT-789""], stage.name=[""development""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""


def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""


def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""
def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""


def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""


def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""

        Query: Prioritize tasks related to 'Project-X' and list in order of urgency [/INST]

        ```
        var_1 = search_object_by_name(query=""Project-X"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""


def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""


def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""


def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""


def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""


def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""

        Query: Summarize all new feature requests from ""ProductX"" and prepare for backlog grooming [/INST]

        ```
        var_1 = search_object_by_name(query=""ProductX"")
var_2 = works_list(type=[""issue""], ticket.source_channel=[""new feature request""], ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Create a summary of tickets from the ""Data Integrity"" task force and give all except high severity tickerts [/INST]

        ```
        var_1 = search_object_by_name(query=""Data Integrity"")
var_2 = works_list(applies_to_part=[var_1], ticket.severity=[""low"", ""medium""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""


def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""

        Query: Extract actionable tasks from team meeting notes MN and prioritize for execution [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""MN"")
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""


def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""


def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""

        Query: What are the new features in the latest iPhone model? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""


def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""


def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""


def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""

        Query: Find and add similar issues to the sprint for the bug report BUG-999 [/INST]

        ```
        var_1 = get_similar_work_items(work_id=""BUG-999"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""

        Query: Display tasks for user DEVU-789 and filter those associated with Rev organization REV-456 [/INST]

        ```
        var_1 = search_object_by_name(query=""DEVU-789"")
var_2 = works_list(created_by=[var_1], issue.rev_orgs=[""REV-456""], type=[""task""])

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        ''
def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
 task_id (str): The ID of the task to be marked as complete

Returns:
 bool: True if marked successfully, False otherwise
""""""
''
def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""
'''
''
def delete_object_by_id(object_id):
""""""
Deletes object from the system based on its ID
Parameters:
    object_id : Object ID to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""
'''
''
def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""
''',
'''
def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""
'''


def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""


def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""
''
def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""
'''


def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
    user_id (str): The ID of the user whose permissions need to be checked
    required_permissions (list): A list of permissions to check against the user's permissions

Returns:
    bool: True if the user has all the required permissions, False otherwise
""""""

        Query: Find issues related to part ï¿½PRT-911ï¿½ and priority ï¿½p0ï¿½, prioritize and summarize, create tasks and add these tasks to ï¿½SPRINT-88ï¿½ if user is ï¿½USER-21ï¿½ else to ï¿½SPRINT-17ï¿½. [/INST]

        ```
        var_1 = works_list(applies_to_part = [""PRT-911""], issue.priority = [""p0""], type = [""issue""])
var_2 = prioritize_objects(objects = var_1)
var_3 = summarize_objects(objects = var_2)
var_4 = create_actionable_tasks_from_text(work_ids = var_3)
var_5 = who_am_i()
if var_5 == ""USER-21"":
temp_1 = add_work_items_to_sprint(work_ids = var_4 , sprint_id = ""SPRINT-88"")
else:
temp_1 = add_work_items_to_sprint(work_ids = var_4 , sprint_id = ""SPRINT-17"")

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""


def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""


def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""


def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""


def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""

        Query: Prioritize all p0, p2 issues for ""WidgetX"" for the user ""USR-321"" [/INST]

        ```
        var_1 = search_object_by_name(query=""WidgetX"")
var_2 = works_list(issue.priority=[""p0"", ""p2""], applies_to_part=[var_1], owned_by=[""USR-321""], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
 work_id (str): The ID of the work item

Returns:
 list: A chronological list of changes made to the work item
""""""
', '

def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
 report_type (str): The type of report to generate
 subject_id (str): The ID of the subject for the report
 include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
 str: The ID of the generated report
""""""
', '

def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
 user_id (str): The ID of the user whose account is to be deactivated
 reason (str): The reason for deactivating the account

Returns:
 bool: True if the account was successfully deactivated; otherwise False
""""""
', '

def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
 task_id (str): The ID of the task to be updated with an estimated time
 estimation_hours (float): The estimated time in hours to complete the task

Returns:
 None
""""""
', '

def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
 user_id (str): The ID of the user to set permissions for
 permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
 bool: True if the permission was set successfully, False otherwise
""""""
', '

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
 work_id (str): The ID of the work item to check

Returns:
 bool: True if the work item is complete, False if it lacks information
""""""
', '

def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
 task_id (str): The ID of the task on which time is spent
 hours_spent (float): The number of hours spent on the task

Returns:
 bool: Status of the time tracking
""""""
', '

def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
 project_id (str): The ID of the project for which the budget is calculated
 cost_limit (float): The cost limit for the project's budget

Returns:
 float: The amount allocated to the project budget
""""""
', '

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
 object_id (str): The ID of the object to check

Returns:
 bool: True if the object exists, otherwise False
""""""
', '

def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
 work_item_id (str): The ID of the work item

Returns:
 float: The number of hours until the deadline
""""""


        Query: Retrieve the history of work items with a severity of ""high"" and check their completeness. [/INST]

        ```
        var_1 = works_list(ticket.severity=[""high""])
var_2 = get_work_item_history(work_id=var_1)
var_3 = validate_work_item_completeness(work_id=var_1)
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""


def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""


def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""


def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
    object_ids (list): A list of object IDs

Returns:
    str: The ID of the generated report
""""""


def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""

        Query: List new tickets from the Rev organization REV-321 and summarize the impact [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-321"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""


def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""


def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""



def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""


def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""

        Query: Find work items for part number ""PART-987"" with P2 priority, prioritize, and summarize them [/INST]

        ```
        var_1 = works_list(applies_to_part=[""PART-987""], issue.priority=[""p2""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""


def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""


def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""

        Query: Identify tasks related to part CAPL-456 that need a response [/INST]

        ```
        var_1 = works_list(applies_to_part=[""CAPL-456""], ticket.needs_response=True, type=[""task""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""


def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""


def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""

def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""
def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""


def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""

        Query: Retrieve and prioritize all tickets needing a response from the PHONE source channel and limit the number of work items to 42. [/INST]

        ```
        var_1 = works_list(ticket.needs_response=True, ticket.source_channel=[""PHONE""], type=[""ticket""], limit=42)
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""


def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""

        Query: Locate and summarize all tasks in the POST_DEPLOYMENT stage owned by ReleaseManager with a limit of 22 work items. [/INST]

        ```
        var_1 = search_object_by_name(query=""ReleaseManager"")
var_2 = works_list(owned_by=[var_1], stage.name=[""POST_DEPLOYMENT""], type=[""task""], limit=22)
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Get all work items similar to TKT-123, summarize them, and prioritize them [/INST]

        ```
        var_1 = get_similar_work_items(work_id=""TKT-123"")
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""

        Query: Find the Rev organization ID for ""ORG-XYZ"", list all tickets from that organization, then summarize and prioritize the tickets with severity ""medium"". [/INST]

        ```
        var_1 = search_object_by_name(query=""ORG-XYZ"")
var_2 = works_list(type=[""ticket""], ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""


def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""

        Query: Find and summarize tickets with high severity from the EMAIL source channel and limit the number of work items to 15. [/INST]

        ```
        var_1 = works_list(ticket.severity=[""high""], ticket.source_channel=[""EMAIL""], type=[""ticket""], limit=15)
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""


def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""


def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""


def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""

        Query: Find and summarize all tasks related to the project code ""PRJ-321"" [/INST]

        ```
        var_1 = search_object_by_name(query=""PRJ-321"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""


def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""
def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
    sprint_id (str): The ID of the sprint for workload calculation

Returns:
    float: Total workload in hours
""""""


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""


def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""


def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""


def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""
def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""

        Query: Summarize all tasks that are in the 'development' stage and owned by me [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(type=[""task""], stage.name=[""development""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""


def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to estimate time for

Returns:
    float: Estimated time in hours to resolve the ticket
""""""


def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""


def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""


def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""


def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""


def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""

        Query: Get the current sprint ID and list all tickets I need to respond to, then sort them by severity. [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""


def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""


def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""

        Query: What if our thoughts have the power to shape the fabric of reality, influencing the course of events? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""

        Query: List tasks owned by ""DEV-TEAM-1"" that need a response, and prioritize them [/INST]

        ```
        var_1 = search_object_by_name(query=""DEV-TEAM-1"")
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: What are the unresolved issues created by user USER-456 in the system? [/INST]

        ```
        var_1 = works_list(created_by=[""USER-456""], type=[""issue""])

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""

        Query: Retrieve similar work items to ISSUE-123, summarize them, and limit the number of work items to 40. [/INST]

        ```
        var_1 = get_similar_work_items(work_id=""ISSUE-123"")
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""


def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""


def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""


def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""


def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""

        Query: Identify and summarize the tasks associated with the component ""COMP-123"" that are in the ""testing"" stage [/INST]

        ```
        var_1 = search_object_by_name(query=""COMP-123"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1], stage.name=[""testing""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""

        Query: Filter and summarize all P1 issues I’m working on [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""

        Query: Find and summarize tasks for the ""Redesign"" project, then add them to my sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""Redesign"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = who_am_i()
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_5)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""
def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""


def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""


def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
 category_id (str): The ID of the category to filter projects by
 active_only (bool): Whether to return only active projects

Returns:
 list: List of project IDs matching the category filter
""""""
', 'def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
 sprint_id (str): The ID of the sprint for workload calculation

Returns:
 float: Total workload in hours
""""""
', '

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
 feature_id (str): The ID of the feature to toggle access
 user_id (str): The ID of the user whose access will be toggled
 enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
 bool: The resulting access status
""""""
', '

def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
 ticket_id (str): The ID of the ticket to be updated
 new_status (str): The new status to update the ticket with

Returns:
 bool: True if the update was successful, otherwise False
""""""
', '

def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
 work_item_id (str): The ID of the work item

Returns:
 float: The number of hours until the deadline
""""""
', '

def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
 user_id (str): The ID of the user to get activities for
 limit (int): The maximum number of activity log entries to return

Returns:
 list: Recent activity log entries
""""""
', '

def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
 project_id (str): The ID of the project for which to calculate progress

Returns:
 float: The percentage of project completion
""""""
', '

def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
 primary_work_id (str): The ID of the primary work item
 duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
 bool: True if merge was successful, otherwise False
""""""
', '

def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
 project_id (str): The ID of the project for which the timeline is requested

Returns:
 list: Key milestones and dates for the project timeline
""""""
', '

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
 task_ids (list): A list of task IDs to be assigned
 employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
 bool: True if the assignment was successful, False otherwise
""""""


        Query: Retrieve the project timeline for project ""PRJ-456"" and calculate the remaining workload for its current sprint. [/INST]

        ```
        var_1 = search_object_by_name(query=""PRJ-456"")
var_2 = get_project_timeline(project_id=var_1)
var_3 = get_sprint_id()
var_4 = retrieve_sprint_workload(sprint_id=var_3)
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""


def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""


def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""


def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""



def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""


def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""


def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""

        Query: Summarize the work items related to part CAPL-123 that are in the 'development' stage [/INST]

        ```
        var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(applies_to_part=[var_1], stage.name=[""development""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""


def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""


def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""


def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""


def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""
def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""
def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""


def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

        Query: Hi, my name is Arya. What's yours? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""
def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""


def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""


def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""


def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

        Query: For the user 'DEVU-456', list their issues and tasks, prioritize them, and add to sprint 'SPRINT-42' [/INST]

        ```
        var_1 = works_list(created_by=[""DEVU-456""], type=[""issue"", ""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-42"")

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""


def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""


def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

        Query: Summarize high severity tickets from the customer UltimateCustomer [/INST]

        ```
        var_1 = search_object_by_name(query=""UltimateCustomer"")
var_2 = works_list(ticket.severity=[""high""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""

        Query: Prioritize and add all my tasks from 'development' stage to my sprint. [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""


def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""


def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""

        Query: Could consciousness be a fundamental force, shaping the unfolding of the universe? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""

        Query: For the issue with ID ""ISSUE-789"", find similar work items and list them by priority [/INST]

        ```
        var_1 = get_similar_work_items(work_id=""ISSUE-789"")
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""


def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""


def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""


def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""


def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""

        Query: Filter and prioritize my tasks in 'Development' stage then assign them to the current sprint [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(stage.name=[""Development""], owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=get_sprint_id())

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""


def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
""""""

        Query: Find and summarize all tasks related to the ""Backend Refactoring"" project [/INST]

        ```
        var_1 = search_object_by_name(query=""Backend Refactoring"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""


def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""


def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""
def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

        Query: Add all tickets marked as 'blocker' to sprint SPRINT-456 [/INST]

        ```
        var_1 = works_list(ticket.severity=[""blocker""], type=[""ticket""])
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-456"")

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""


def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""


def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""


def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""

        Query: For customer BetaCorp, list all low priority tickets, summarize, and assign to user USER-ABC [/INST]

        ```
        var_1 = search_object_by_name(query=""BetaCorp"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.severity=[""low""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = search_object_by_name(query=""USER-ABC"")
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""
def filter_projects_by_status(project_ids, status=""active""):
 """"""
 Filters a list of project IDs by their status
 
 Parameters:
  project_ids (list): A list of project IDs to filter
  status (str): The status to filter by, default is 'active'
 
 Returns:
  list: Project IDs matching the status
 """"""
 ', '
 
 def extract_contact_info(text_id, entity_type):
 """"""
 Extracts contact information from a text source based on a given entity type
 
 Parameters:
  text_id (str): The ID of the text source from which to extract contact information
  entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'
 
 Returns:
  list: Extracted contact information
 """"""', '
 
 def get_work_item_history(work_id):
 """"""
 Retrieves the history of changes for a given work item
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: A chronological list of changes made to the work item
 """"""
 ', '
 
 def list_user_permissions(user_id):
 """"""
 Lists all the permissions that a user has within the system
 
 Parameters:
  user_id (str): The ID of the user for whom permissions are being listed
 
 Returns:
  list: A list of permissions that the user possesses
 """"""
 ', '
 
 def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
 """"""
 Merges duplicate work items into the primary work item
 
 Parameters:
  primary_work_id (str): The ID of the primary work item
  duplicate_work_ids (list): List of IDs of duplicate work items to be merged
 
 Returns:
  bool: True if merge was successful, otherwise False
 """"""
 
def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""


def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""


def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""


def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""

        Query: Get the ID of the current sprint and search for an object by name ""CriticalComponent"". Extract contact information from the associated vendor, filter related projects by status ""delayed"", and get the work item history. Summarize the work items, prioritize them, and merge any duplicates before adding them to the sprint. [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""CriticalComponent"")
var_3 = extract_contact_info(text_id=var_2, entity_type=""company"")
var_4 = filter_projects_by_status(project_ids=var_2, status=""delayed"")
var_5 = get_work_item_history(work_id=var_4)
var_6 = summarize_objects(objects=var_4)
var_7 = prioritize_objects(objects=var_4)
var_8 = merge_duplicate_work_items(primary_work_id=var_7[0], duplicate_work_ids=var_7[1:])
var_9 = add_work_items_to_sprint(work_ids=[var_7[0]], sprint_id=var_1)
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""


def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""


def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""


def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

        Query: Retrieve the current sprint ID and list all the high priority tickets, then prioritize and summarize them [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""high""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
 primary_ticket_id (str): The ID of the primary ticket that remains
 duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
 None
""""""
', '

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
 work_id (str): The ID of the work item to calculate the estimated time

Returns:
 float: Estimated completion time in hours
""""""
', '

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
 sprint_id (str): The ID of the sprint
 report_type (str): The type of report to be generated

Returns:
 str: The ID of the generated report
""""""
', '

def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
 user_ids (list): A list of user IDs to be removed from the group
 group_id (str): The ID of the group from which the users should be removed

Returns:
 bool: Status of the removal
""""""
', '

def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be determined

Returns:
 int: The number of tasks assigned to the user
""""""
', '

def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
 ticket_id (str): The ID of the ticket to estimate time for

Returns:
 float: Estimated time in hours to resolve the ticket
""""""
', '

def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which to generate the report

Returns:
 str: A string summary of the project's progress report
""""""
', '

def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
 user_id (str): The ID of the user whose activity is being logged
 activity_description (str): A description of the activity

Returns:
 bool: True if the logging was successful, False otherwise
""""""
', '

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
 part_id (str): The ID of the part to check in inventory
 minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
 bool: True if the minimum quantity is available; otherwise False
""""""
', '

def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
 work_item_id (str): The ID of the work item to update
 new_stage (str): The new stage to which the work item should be moved

Returns:
 bool: True if the stage is successfully updated, False otherwise
""""""

        Query: Estimate the resolution time for ticket ""TICKET-321"", merge any duplicates, and then update the ticket's stage to ""Resolved"". [/INST]

        ```
        var_1 = estimate_ticket_resolution_time(ticket_id=""TICKET-321"")
var_2 = get_similar_work_items(work_id=""TICKET-321"")
var_3 = merge_duplicate_tickets(primary_ticket_id=""TICKET-321"", duplicate_ticket_ids=var_2)
var_4 = update_stage_of_work_item(work_item_id=""TICKET-321"", new_stage=""Resolved"")
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Retrieve and categorize work items from user USER-456 [/INST]

        ```
        var_1 = search_object_by_name(query=""USER-456"")
var_2 = works_list(created_by=[var_1], type=[""issue"", ""ticket"", ""task""])

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""


def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""

        Query: Add new  issues from department REV-345 to my sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-345"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""issue""])
var_3 = who_am_i()
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""


def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""


def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""

        Query: Fetch my current sprint ID and list all tasks that need responses [/INST]

        ```
        var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(ticket.needs_response=True, type=[""task""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""

        Query: Create a list of action items from the meeting notes and add to my 'To-Do' tasks [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""meeting notes"")

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""


def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""


def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""


def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""

        Query: Retrieve my tickets that need a response and summarize them [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""


def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""
def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""

        Query: Add new high-priority tickets from REV-456 to my sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.severity=[""high""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""


def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""


def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""


def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""


def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""

        Query: Summarize my tickets from the 'development' stage and prioritize them [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(stage.name=[""development""], owned_by=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""


def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
""""""


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""


def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""

        Query: Find work items created by user DEVU-456, prioritize them, and add to sprint SPR-ID-789. [/INST]

        ```
        var_1 = works_list(created_by=[""DEVU-456""], type=[""issue"", ""ticket"", ""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPR-ID-789"")

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""


def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""


def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""


def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""


def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""

        Query: Retrieve tickets that need a response and are associated with ""REV-456"", then add them to the current sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""


def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""
def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
    sprint_id (str): The ID of the sprint for workload calculation

Returns:
    float: Total workload in hours
""""""


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""

        Query: Retrieve current sprint's ID and list all P2 issues [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p2""], type=[""issue""])

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""
def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""


def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""

        Query: Create a task for each actionable item from the brainstorming session notes and add them to the sprint with ID SPRINT-456 [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""brainstorming session notes"")
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-456"")

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""


def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""


def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""

        Query: Get a list of all P1 issues reported by user USER-XYZ and identify any duplicates. [/INST]

        ```
        var_1 = search_object_by_name(query=""USER-XYZ"")
var_2 = works_list(type=[""issue""], created_by=[var_1], issue.priority=[""p1""])
var_3 = get_similar_work_items(work_id=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""


def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""


def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""


def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""

        Query: Find high severity tickets for the UltimateWidget project and summarize them [/INST]

        ```
        var_1 = search_object_by_name(query=""UltimateWidget"")
var_2 = works_list(ticket.severity=[""high""], applies_to_part=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""


def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""


def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""


def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""

        Query: Assign the current user's P2 issues to the sprint tagged SPRINT-789 [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-789"")

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""


def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""


def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""


def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""


def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
    object_ids (list): A list of object IDs

Returns:
    str: The ID of the generated report
""""""

        Query: Retrieve issues with priority p2 from Rev organization REV-321 and sort them by priority [/INST]

        ```
        var_1 = works_list(issue.rev_orgs=[""REV-321""], issue.priority=[""p2""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""


def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""

        Query: Identify work items of type 'task' owned by me and summarize them [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""


def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""

        Query: Find tickets needing response from Rev organization ORG-321 and prioritize them [/INST]

        ```
        var_1 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.rev_org=[""ORG-321""])
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""


def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""
def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""


def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""

        Query: Filter issues for part PROD-456 with priority P1 and generated by Rev organization REV-ABC [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-ABC"")
var_2 = works_list(type=[""issue""], issue.priority=[""p1""], issue.rev_orgs=[var_1], applies_to_part=[""PROD-456""])

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""


def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""


def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""
def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""


def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""

        Query: Find work items created by user ""User123"" in the ""Testing"" phase and add them to the sprint for this month. [/INST]

        ```
        var_1 = search_object_by_name(query=""User123"")
var_2 = works_list(created_by=[var_1], stage.name=[""Testing""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""


def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""


def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""


def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""


def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""
def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""

        Query: Locate work items owned by user DEV-999, filter for tasks at 'QA' stage, summarize and prioritize them [/INST]

        ```
        var_1 = search_object_by_name(query=""DEV-999"")
var_2 = works_list(owned_by=[var_1], stage.name=[""QA""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        def filter_projects_by_status(project_ids, status=""active""):
 """"""
 Filters a list of project IDs by their status
 
 Parameters:
  project_ids (list): A list of project IDs to filter
  status (str): The status to filter by, default is 'active'
 
 Returns:
  list: Project IDs matching the status
 """"""
 ', '
 
 def extract_contact_info(text_id, entity_type):
 """"""
 Extracts contact information from a text source based on a given entity type
 
 Parameters:
  text_id (str): The ID of the text source from which to extract contact information
  entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'
 
 Returns:
  list: Extracted contact information
 """"""', '
 
 def get_work_item_history(work_id):
 """"""
 Retrieves the history of changes for a given work item
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: A chronological list of changes made to the work item
 """"""
 ', '
 
 def list_user_permissions(user_id):
 """"""
 Lists all the permissions that a user has within the system
 
 Parameters:
  user_id (str): The ID of the user for whom permissions are being listed
 
 Returns:
  list: A list of permissions that the user possesses
 """"""
 ', '
 
 def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
 """"""
 Merges duplicate work items into the primary work item
 
 Parameters:
  primary_work_id (str): The ID of the primary work item
  duplicate_work_ids (list): List of IDs of duplicate work items to be merged
 
 Returns:
  bool: True if merge was successful, otherwise False
 """"""
 


def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""


def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""

        Query: Search for an object by name ""CustomerXYZ"", use the ID to extract contact information, and get similar work items. Filter these work items by status ""completed"", prioritize them, and merge any duplicates before adding them to the current sprint. Retrieve the history of changes for the primary work item. [/INST]

        ```
        var_1 = search_object_by_name(query=""CustomerXYZ"")
var_2 = extract_contact_info(text_id=var_1, entity_type=""company"")
var_3 = get_similar_work_items(work_id=var_1)
var_4 = works_list(type=[""issue"", ""ticket"", ""task""], stage.name=[""completed""])
var_5 = prioritize_objects(objects=var_4)
var_6 = merge_duplicate_work_items(primary_work_id=var_5[0], duplicate_work_ids=var_5[1:])
var_7 = get_sprint_id()
var_8 = add_work_items_to_sprint(work_ids=[var_5[0]], sprint_id=var_7)
var_9 = get_work_item_history(work_id=var_5[0])
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""


def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""


def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""


def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""


def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""


def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""


def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

        Query: Search for the 'ProjectX' object and provide a summary [/INST]

        ```
        var_1 = search_object_by_name(query=""ProjectX"")
var_2 = works_list(owned_by=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""


def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""


def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""

        Query: Find tasks related to the project 'Alpha' and sort them by importance [/INST]

        ```
        var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""


def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""


def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""


def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""


def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""


def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""

        Query: Create tasks for notes T from the meeting with entity XYZ, summarize these tasks [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""T"")
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""


def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""
def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""


def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""


def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""


def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""


def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""

        Query: Find tasks related to REV-456, list them by priority, and add them to the sprint identified by ID SPRINT-789 [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""SPRINT-789"")

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""


def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

        Query: Retrieve and summarize all tasks related to ""Data-Integrity"" from the current sprint [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""Data-Integrity"")
var_3 = works_list(applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
 sprint_id (str): The ID of the ticket

Returns:
 list: A list of changes made to the sprint
""""""
', 'def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
 user_id (str): The ID of the user whose tasks are to be fetched
 include_completed (bool): Whether to include completed tasks in the list

Returns:
 list: List of tasks assigned to the user
""""""
', 'def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
 project_ids (list): A list of project IDs to filter
 status (str): The status to filter by, default is 'active'

Returns:
 list: Project IDs matching the status
""""""
', '

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
 work_ids (list): A list of work item IDs for report generation

Returns:
 str: The ID of the generated report
""""""
', '

def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
 tag_id (str): The ID of the tag used to filter work items
 include_archived (bool): Include archived work items if set to True

Returns:
 list: Work items associated with the tag
""""""
', '

def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
 dataset_id (str): The ID of the dataset from which to generate the report
 report_type (str): The type of report to generate, default is 'summary'

Returns:
 str: The ID of the generated report
""""""
', '
def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
 user_id (str): The ID of the user whose status is to be updated
 status (str): The new status to apply to the user account

Returns:
 str: updated User Id
""""""
', '

def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
 user_id (str): The ID of the user whose work items are to be retrieved
 work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket''']

Returns:
 list: Work items created by the user
""""""
', '

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 float: Estimated effort in hours
""""""
', '

def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
 group_id (str): The ID of the group

Returns:
 list: User IDs belonging to the group
""""""



def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""

        Query: Retrieve the history of sprint ""SPRINT-42"", fetch all tasks assigned to user ""QAEngineer1"" including completed ones, and summarize the tasks for a report. [/INST]

        ```
        var_1 = get_sprint_history(sprint_id=""SPRINT-42"")
var_2 = fetch_user_tasks(user_id=""QAEngineer1"", include_completed=True)
var_3 = summarize_objects(objects=var_2)
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""


def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""


def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""


def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""


def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""
def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""

        Query: Assign tickets from customer ACME with low severity to the current sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""ACME"")
var_2 = works_list(ticket.severity=[""low""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to estimate time for

Returns:
    float: Estimated time in hours to resolve the ticket
""""""

        Query: List all items of type 'issue' I own and summarize them for the current sprint [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(type=[""issue""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""


def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""

        Query: Search for the user ID of 'LeadDev' and list all work items they created [/INST]

        ```
        var_1 = search_object_by_name(query=""LeadDev"")
var_2 = works_list(created_by=[var_1])

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""

        Query: Find and summarize tasks related to the ""AlphaProject"" [/INST]

        ```
        var_1 = search_object_by_name(query=""AlphaProject"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""


def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""


def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""

        Query: Find and summarize tickets with medium severity that need a response. [/INST]

        ```
        var_1 = works_list(ticket.severity=[""medium""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""
def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""


def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
""""""


def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""


def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""


def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""

        Query: Check for any tickets from ""TopClient"" that need a response and summon a summary [/INST]

        ```
        var_1 = search_object_by_name(query=""TopClient"")
var_2 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""


def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""


def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""


def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""


def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""

        Query: Prioritize tasks created by user USER-789 and summarize the results [/INST]

        ```
        var_1 = works_list(created_by=[""USER-789""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Generate a list of tasks for the UX improvements mentioned in the document UX_Strategy.pdf and assign them to the design sprint [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""UX_Strategy.pdf"")
var_2 = search_object_by_name(query=""design sprint"")
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""

        Query: Is the search for meaning a universal human quest, or is it a subjective pursuit? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""


def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""

        Query: Summarize all tickets from the REV-456 organization that need a response. [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""


def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""


def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""


def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""

        Query: Locate and prioritize all P1 issues owned by LeadDeveloper and limit the number of work items to 18. [/INST]

        ```
        var_1 = works_list(owned_by=[""LeadDeveloper""], issue.priority=[""p1""], type=[""issue""], limit=18)
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""

def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""
def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""


def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""

        Query: Collect my issues from Rev organization REV-321 and summarize the urgent ones [/INST]

        ```
        var_1 = who_am_i()
var_2 = search_object_by_name(query=""REV-321"")
var_3 = works_list(owned_by=[var_1], issue.rev_orgs=[var_2], type=[""issue""])
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""

def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""


def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""


def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""

        Query: Generate a list of issues for 'Product XYZ' and prepare a prioritized summary [/INST]

        ```
        var_1 = search_object_by_name(query=""Product XYZ"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""


def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""

        Query: Retrieve the current sprint's ID and summarize the tasks within it [/INST]

        ```
        var_1 = get_sprint_id()
var_2 = works_list(type=[""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Find and summarize work items related to part PROD-789 created by user USER-456 [/INST]

        ```
        var_1 = search_object_by_name(query=""USER-456"")
var_2 = search_object_by_name(query=""PROD-789"")
var_3 = works_list(created_by=[var_1], applies_to_part=[var_2], type=[""work""])
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Get current user's P1 issues from Rev organization REV-999 and summarize them [/INST]

        ```
        var_1 = who_am_i()
var_2 = search_object_by_name(query=""REV-999"")
var_3 = works_list(issue.priority=[""p1""], owned_by=[var_1], issue.rev_orgs=[var_2], type=[""issue""])
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""


def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""


def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""


def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""

        Query: Summarize the tasks assigned to me with priority p2 and filter by part PROD-456 [/INST]

        ```
        var_1 = who_am_i()
var_2 = search_object_by_name(query=""PROD-456"")
var_3 = works_list(owned_by=[var_1], issue.priority=[""p2""], applies_to_part=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""


def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""


def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""

        Query: Prioritize tickets from source channel 'email' and filter by user AGENT-007 [/INST]

        ```
        var_1 = works_list(owned_by=[""AGENT-007""], ticket.source_channel=[""email""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""


def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""

        Query: Summarize and prioritize all open issues from the ""DeltaInitiative"" project [/INST]

        ```
        var_1 = search_object_by_name(query=""DeltaInitiative"")
var_2 = works_list(type=[""issue""], issue.rev_orgs=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""


def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""

def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""


def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""

        Query: Find all tasks related to the ""Backlog"" stage, filter them by ""p0"" priority, and then summarize the list. [/INST]

        ```
        var_1 = works_list(type=[""task""], stage.name=[""Backlog""], issue.priority=[""p0""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""


def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""

        Query: Add P1 and P2 issues to current sprint for part CAPL-456 [/INST]

        ```
        var_1 = works_list(applies_to_part=[""CAPL-456""], issue.priority=[""p1"", ""p2""], type=[""issue""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""


def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""


def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
 work_item_id (str): The ID of the work item that is a duplicate
 duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
 bool: True if the item is successfully marked, False otherwise
""""""
', '

def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
 object_id (str): The ID of the object for which the status is updated
 new_status (str): The new status for the object
 changed_by (str): The ID of the user who is changing the status

Returns:
 None
""""""
', '

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
 work_id (str): The ID of the work item to be reassigned
 new_owner_id (str): The user ID of the new owner

Returns:
 bool: True if reassignment is successful, False otherwise
""""""
', '

def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
 older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
 active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
 str: ID of tickets archived
""""""
', '

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which the progress report is needed
 report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
 str: The generated progress report
""""""
', '

def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
 user_id (str): The ID of the user whose skills are being queried

Returns:
 list: The skills of the user
""""""
', '

def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
 object_id (str): The ID of the object for which history is requested

Returns:
 list: A list of changes made to the object
""""""
', '

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
 work_id (str): The ID of the work item to calculate the estimated time

Returns:
 float: Estimated completion time in hours
""""""
', '

def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
 task_ids (list): A list of task IDs whose status needs updating
 new_status (str): The new status to apply to the tasks

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
 user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
 list: User permissions
""""""



def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

        Query: Archive tickets older than ""2022-01-01"" that are active, get the IDs, and generate a summary progress report for each archived ticket. [/INST]

        ```
        var_1 = archive_old_tickets(older_than_date=""2022-01-01"", active_status=True)
var_2 = generate_progress_report(project_id=var_1, report_format=""summary"")
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Generate a list of my P3 tickets, summarize and identify similar work items [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], issue.priority=[""p3""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_similar_work_items(work_id=var_2[0])

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""

        Query: Identify work items related to CAPL-123 that require a response and summarize them [/INST]

        ```
        var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""

        Query: Summarize tasks from the engineering team and filter by those needing a response [/INST]

        ```
        var_1 = works_list(ticket.needs_response=True, type=[""task""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""
def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""


def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""

        Query: Find work items related to component ""UI-Toolkit"" and determine if any require immediate attention. [/INST]

        ```
        var_1 = search_object_by_name(query=""UI-Toolkit"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Add my issues marked as ""blocker"" to the sprint ending this Friday. [/INST]

        ```
        var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], issue.priority=[""blocker""], type=[""issue""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""


def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""


def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""


def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""

        Query: Find work items associated with REV-Engineering, prioritize and add them to the sprint [/INST]

        ```
        var_1 = search_object_by_name(query=""REV-Engineering"")
var_2 = works_list(issue.rev_orgs=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""



def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""


def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""


def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""

        Query: Create a list of new tasks from notes taken during the ""Gamma"" project meeting. [/INST]

        ```
        var_1 = create_actionable_tasks_from_text(text=""Gamma project meeting"")

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""


def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""


def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""


def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""


def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""


def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""

        Query: Find all P2 tickets related to ""CustomerX"" and then summarize the results. [/INST]

        ```
        var_1 = search_object_by_name(query=""CustomerX"")
var_2 = works_list(issue.rev_orgs=[var_1], issue.priority=[""p2""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""


def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""


def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""


def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""

        Query: Find similar tasks to 'TASK-321' and generate a summary [/INST]

        ```
        var_1 = get_similar_work_items(work_id=""TASK-321"")
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""


def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""


def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""

        Query: Summarize and prioritize tasks related to the ""UX Improvement"" project [/INST]

        ```
        var_1 = search_object_by_name(query=""UX Improvement"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""

        Query: Can you provide a list of all the countries in the European Union? [/INST]

        ```
        #Unanswerable_Invalid_Query_Error
        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Find and summarize all tickets related to ""CAPL-987"" and then prioritize and add to sprint ""Sprint-22"" [/INST]

        ```
        var_1 = search_object_by_name(query=""CAPL-987"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = add_work_items_to_sprint(work_ids=var_4, sprint_id=""Sprint-22"")

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""


def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""


def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""


def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""

        Query: Identify my tickets that need responses, get the current sprint, and add these tasks to it [/INST]

        ```
        var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Search for the user ""QA_Expert"" and get a list of all tickets they need to respond to. [/INST]

        ```
        var_1 = search_object_by_name(query=""QA_Expert"")
var_2 = works_list(created_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""


def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""


def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""


def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""


def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""


def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""

        Query: Retrieve and summarize all tickets needing a response for user DEVU-123 [/INST]

        ```
        var_1 = search_object_by_name(query=""DEVU-123"")
var_2 = works_list(ticket.needs_response=True, owned_by=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

        Query: Find and summarize all P2 issues under the SALES rev organization with a limit of 20 work items. [/INST]

        ```
        var_1 = works_list(issue.priority=[""P2""], issue.rev_orgs=[""SALES""], limit=20, type=[""issue""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""
def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""


def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""

        Query: Create tasks from the insights of a project update and add them to the sprint for user USER-123. [/INST]

        ```
        var_1 = search_object_by_name(query=""USER-123"")
var_2 = create_actionable_tasks_from_text(text=""project update"")
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""


def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""


def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""

        Query: Filter issues by type 'task' for user DEVU-456 and summarize the results [/INST]

        ```
        var_1 = works_list(created_by=[""DEVU-456""], type=[""task""])
var_2 = summarize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
    user_id (str): The ID of the user whose permissions need to be checked
    required_permissions (list): A list of permissions to check against the user's permissions

Returns:
    bool: True if the user has all the required permissions, False otherwise
""""""


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""

        Query: Find and list all tasks related to product PROD-321 and sort them by priority [/INST]

        ```
        var_1 = works_list(applies_to_part=[""PROD-321""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""


def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""


def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""

        Query: Retrieve a list of work items related to part CAPL-123 and filter them for those created by user DEVU-456 [/INST]

        ```
        var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = search_object_by_name(query=""DEVU-456"")
var_3 = works_list(applies_to_part=[var_1], created_by=[var_2], type=[""task""])

        ```
        </s>
        "
"
        <s>
        [INST]
        Added Tools: 

        

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""


def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""


def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""
def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""


def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""

def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""


def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""

        Query: For part PROD-456, summarize issues, create tasks and add to sprint [/INST]

        ```
        var_1 = works_list(applies_to_part=[""PROD-456""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
var_3 = create_actionable_tasks_from_text(text=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)

        ```
        </s>
        "
